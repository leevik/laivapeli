{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\apart\\\\OneDrive\\\\Ty\\xF6p\\xF6yt\\xE4\\\\Ohjelmointi\\\\Webohj\\\\ReactProjekti2\\\\laiva\\\\src\\\\components\\\\Laiva.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styles from '../../src/Style.module.css';\nimport { useDrag } from \"react-dnd\"; //import { DndProvider} from \"react-dnd\";\n//import { HTML5Backend } from \"react-dnd-html5-backend\";\n//Väliaikainen komponentti, millä testailen DnD\n\nconst Laiva = () => {\n  _s();\n\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      name: 'laiva1',\n      //Required. A plain JavaScript object describing the data being dragged. This is the only information available to the drop targets about the drag source so it's important to pick the minimal data they need to know. It's a good idea to return something like { type, id } from this method.\n      type: 'laiva',\n      id: 1\n    },\n    end: (item, monitor) => {\n      console.log(\"end\"); //Tähän luultavasti pitää laittaa se mitä tapahtuu kun tiputtaa hyväksyttävään soluun\n      //Solu 1.1 on hyväksytty Field.js sisällä\n\n      /*const dropResult = monitor.getDropResult();\r\n      if(dropResult && dropResult.name === 'Column 1'){\r\n          setIsFirstColumn(true)\r\n      } else {\r\n          setIsFirstColumn(false);\r\n      }*/\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drag,\n    className: \"movable-item\",\n    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        className: styles.td,\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Laiva, \"IjyI5uV8ET8oZCgEs++uqE2gplk=\", false, function () {\n  return [useDrag];\n});\n\n_c = Laiva;\nexport default Laiva;\n\nvar _c;\n\n$RefreshReg$(_c, \"Laiva\");","map":{"version":3,"sources":["C:/Users/apart/OneDrive/Työpöytä/Ohjelmointi/Webohj/ReactProjekti2/laiva/src/components/Laiva.js"],"names":["React","styles","useDrag","Laiva","isDragging","drag","item","name","type","id","end","monitor","console","log","collect","td"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,OAAT,QAAwB,WAAxB,C,CACA;AACA;AAEA;;AACA,MAAMC,KAAK,GAAE,MAAM;AAAA;;AAEf,QAAM,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAeC,IAAf,IAAuBH,OAAO,CAAC;AACjCI,IAAAA,IAAI,EAAE;AAACC,MAAAA,IAAI,EAAE,QAAP;AAAiB;AACvBC,MAAAA,IAAI,EAAE,OADA;AAENC,MAAAA,EAAE,EAAE;AAFE,KAD2B;AAIjCC,IAAAA,GAAG,EAAE,CAACJ,IAAD,EAAOK,OAAP,KAAmB;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EADoB,CAEpB;AACA;;AAGA;AACZ;AACA;AACA;AACA;AACA;AACS,KAhBgC;AAiBjCC,IAAAA,OAAO,EAAGH,OAAD,KAAc;AACnBP,MAAAA,UAAU,EAAEO,OAAO,CAACP,UAAR;AADO,KAAd;AAjBwB,GAAD,CAApC;AAuBA,sBAEI;AAAK,IAAA,GAAG,EAAEC,IAAV;AAAgB,IAAA,SAAS,EAAC,cAA1B;AAAA,2BACI;AAAA,6BACI;AAAI,QAAA,SAAS,EAAEJ,MAAM,CAACc,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UAFJ;AAQH,CAjCD;;GAAMZ,K;UAE2BD,O;;;KAF3BC,K;AAoCN,eAAeA,KAAf","sourcesContent":["import React from 'react';\r\nimport styles from '../../src/Style.module.css';\r\nimport { useDrag } from \"react-dnd\";\r\n//import { DndProvider} from \"react-dnd\";\r\n//import { HTML5Backend } from \"react-dnd-html5-backend\";\r\n\r\n//Väliaikainen komponentti, millä testailen DnD\r\nconst Laiva =() => { \r\n\r\n    const [{isDragging}, drag] = useDrag({\r\n        item: {name: 'laiva1', //Required. A plain JavaScript object describing the data being dragged. This is the only information available to the drop targets about the drag source so it's important to pick the minimal data they need to know. It's a good idea to return something like { type, id } from this method.\r\n        type: 'laiva',\r\n        id: 1},\r\n        end: (item, monitor) => {\r\n            console.log(\"end\");\r\n            //Tähän luultavasti pitää laittaa se mitä tapahtuu kun tiputtaa hyväksyttävään soluun\r\n            //Solu 1.1 on hyväksytty Field.js sisällä\r\n\r\n\r\n            /*const dropResult = monitor.getDropResult();\r\n            if(dropResult && dropResult.name === 'Column 1'){\r\n                setIsFirstColumn(true)\r\n            } else {\r\n                setIsFirstColumn(false);\r\n            }*/\r\n        },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n\r\n    return (\r\n      \r\n        <div ref={drag} className='movable-item'>\r\n            <tr>\r\n                <td className={styles.td} >1</td>\r\n            </tr>\r\n        </div>   \r\n    )\r\n};\r\n\r\n\r\nexport default Laiva;"]},"metadata":{},"sourceType":"module"}